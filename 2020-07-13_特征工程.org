* 特征工程
主要参考： https://www.jianshu.com/p/7066558bd386
[[file:images/feature_engineering]]

** 数据预处理
*** 特征缩放
**** 标准化
**** 归一化
*** 定量特征二值化
*** 定性特征哑编码
*** 缺失值处理
** 特征选择
*** 过滤法(Filter)
**** 方差选择法
使用方差选择法，先要计算各个特征的方差，选择方差大于阈值的特征。
#+BEGIN_SRC python
from sklearn.feature_selection import VarianceThreshold

# 方差选择法，返回值为特征选择后的数据
# 参数threshold为方差的阈值
VarianceThreshold(threshold=3).fit_transform(iris.data)
#+END_SRC
**** 相关系数法
使用相关系数法，先要计算各个特征对目标值的相关系数的P值。
#+BEGIN_SRC python
from sklearn.feature_selection import SelectKBest
from scipy.stats import pearsonr

#选择K个最好的特征，返回选择特征后的数据
#第一个参数为计算评估特征是否好的函数，该函数输入特征矩阵和目标向量，输出二元组（评分，P值）的数组，数组第i项为第i个特征的评分和P值。在此定义为计算相关系数
#参数k为选择的特征个数
SelectKBest(lambda X, Y: array(map(lambda x:pearsonr(x, Y), X.T)).T, k=2).fit_transform(iris.data, iris.target)
# 此处代码有问题，得改
#+END_SRC
**** 卡方检验
经典的卡方检验是检验定性自变量对定性因变量的相关性。假设自变量有N种取值，
因变量有M种取值，考虑自变量等于i且因变量等于j的样本频数的观察值与期望的差距，构建统计量。
chi-square计算公式：\chi^{2} = \sum_{i=1}^{n} (O_{i} - E_{i})^{2} / E_{i}
p值可通过计算chi-square后查询卡方分布表得出，用于判断H0假设是否成立的依据。
#+BEGIN_SRC python
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2

# 选择K个最好的特征，返回选择特征后的数据
SelectKBest(chi2,k=2).fit_transform(iris.data,iris.target)
#+END_SRC
**** 互信息法
经典的互信息也是评价定性自变量对定性因变量的相关性的。
#+BEGIN_SRC python
from sklearn.feature_selection import SelectKBest
from minepy import MINE

# 由于MINE的设计不是函数式，定义mic方法将其改为函数式的，返回一个二元组，二元组的第2项设置成固定的P值0.5
def mic(x,y):
    m = MINE()
    m.compute_score(x,y)
    return (m.mic(),0.5)

# 选择K个最好的特征，返回特征选择后的数据
SelectKBest(lambda X, Y: array(map(lambda x:mic(x, Y), X.T)).T, k=2).fit_transform(iris.data, iris.target)
# 此处代码有问题，得改
#+END_SRC

*** 包装法(Wrapper)
*** 嵌入法(Embedded)
** 降维
*** PCA
#+BEGIN_SRC python
from sklearn.decomposition import PCA

# 主成分分析法，返回降维后的数据
# 参数n_components为主成分数目
PCA(n_components=2).fit_transform(iris.data)
#+END_SRC

*** LDA
#+BEGIN_SRC python
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

# 线性判别分析法，返回降维后的数据
# 参数n_components为降维后的维数
LDA(n_components=2).fit_transform(iris.data,iris.target)
#+END_SRC
