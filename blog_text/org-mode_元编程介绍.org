
以下介绍摘自：[[https://brantou.github.io/2017/04/01/babel-intro/][Brantou的日常]]
** 序言
Bable 可让许多不同的语言工作一起。 编程语言生活在自然语言的 Org-mode 文档的代码块之中。 一个数据片段可从一个表格传递给一个 Pythoh 代码块，
然后可能再转移到一个 R 代码块， 最终以数据块被嵌入段落的中间而终结，或者通过 gnuplot 代码块生成图片嵌入在文档中。
通过扩展 Org-mode, 使其具有编辑,导出和执行源代码的功能, Babel 将 Org-mode 变成了文学编程和可重复性研究的工具。
Babel 通过提供以下特性来增强 Org-mode对代码代码块的支持: Babel augments Org-mode support for code blocks by providing:
代码块的交互和执行结果导出代码块可像函数一样可参数化，引用其他代码块，可被远程调用拼接，导出源代码到文件支持文学编程。
<!– more –>
** 概述
Babel 在几个不同的方面提供了新的功能，不同的人可能想在不同的地方开始。
在 Org-mode 中使用代码块
如果目前你还不知道怎么在 Org-mode 中创建代码块， 或者不清楚怎样在 Org-mode 的缓冲区和语言主模式编辑缓冲区(the language major-mode edit buffer)之间切换， 那么你需要应该看看Org 手册中的相关部分 和 下面的代码块章节, 尝试下，然后赶紧回来。
执行代码
Babel 的核心是能够在 Org-mode 代码块中执行代码， 从其他块和表格获取输入，并输出到更多的块和表。 从源代码执行开始描述。
Literate Programming
程序员编写的代码，通常以其他方式执行（例如从命令行或将其引入到交互式会话中）， 那么对 Babel 的简单介绍就是将代码放在 Org-mode 文件的代码块中， 然后使用 Babel 的 Literate Programming 支持从 Org-mode 文件中扩展提取源代码。
所有这些用例以及 Babel 功能的详尽文档都被涵盖在 Org 手册的 使用源代码中。
** 初始配置
If you have a working Emacs installation, then getting started with Babel is a simple process.
If you are running Emacs24 a current version of Org-mode with Babel is already available by default. Otherwise, it is strongly recommended that you update to the latest version of Org-mode by keeping current with Org-mode development. As of Org-mode 7.0, Babel is included as part of Org-mode.
Optionally activate the subset of languages that you will want to execute with Babel. See Configure active languages instructions. Emacs Lisp is activated by default so this step can be skipped for now and all emacs-lisp examples will still work as expected.
If you have made any changes don’t forget to evaluate your modified .emacs.
** 代码块
*** 代码块在 Org-mode 中
Babel 是关于 Org-mode 中代码块的。 如果还不熟悉 Org-mode 中的代码块的概念，请在继续之前查看 Org-mode手册的相关章节。
受到支持语言的代码块可以出现在 Org-mode 文件的任意位置。 代码块可以直接在 Org-mode 文件中编辑，但通过 C-c '= 调用的函数 =org-edit-src-code 编辑代码往往更容易。 将代码块放全新的缓冲区中，同时激活相应语言的模式,语言的编辑特性你全都可用，真是爽。
#+begin_src language org-switches
,body
#+end_src
ruby 代码的代码块如下所示:
#+begin_src ruby
,require 'date'
,"This file was last evaluated on #{Date.today}"
#+end_src
*** 代码块在 Babel 中
Babel 向代码块添加了一些新的元素。 基本结构变成了:
#+begin_src language  org-switches header-arguments
,body
#+end_src
language
代码块中代码的语言标示。 有效值必须是 org-babel-interpreters 的成员。
header-arguments
header-arguments 控制源代码块的执行和输出的许多方面。
请参阅Header Arguments部分，以查看可用的 header-arguments= 。
body
等待被执行的源代码。 一个重要的键绑定 C-c '= , 调用 =org-edit-src-code ，打开一个包含适合于该语言 major mode 的编辑缓冲区。
然后你就可以像往常在emacs编辑代码那样来编辑你的代码块。
** 源代码执行
Babel 通过将代码传递给解释器来执行解释语言（如shell，python，R等）的代码块。 在执行结果上可以做进一步的操作，如果你想的话。
*** 示例
以下是三种不同语言的代码块，其后是其输出。 如果正在Emacs中查看本文档的 Org-mode 版本，则把光标放置在块的任何位置，然后按 C-c C-c 执行代码1（并随意更改它）。
**** Ruby
在 Org-mode 的文件中:
#+begin_src ruby
require 'date'
"This file was last evaluated on #{Date.today}"
#+end_src
HTML 导出的代码:
1
2
require 'date'
"This file was last evaluated on #{Date.today}"
HTML 导出的执行结果:
This file was last evaluated on 2017-04-05
*** Shell
在 Org-mode 的文件中:
#+begin_src sh
  echo "This file takes up `du -h babel-intro.org |sed 's/\([0-9k]*\)[ ]*babel-intro.org/\1/'`"
#+end_src
HTML 导出的代码:
echo "This file takes up `du -h babel-intro.org |sed 's/\([0-9k]*\)[ ]*babel-intro.org/\1/'`"
HTML 导出的执行结构:
This file takes up 36K
*** R
当前这个文件中最常用的词是？ 在 Org-mode 文件中:
#+begin_src R :colnames yes
  words <- tolower(scan("babel-intro.org", what="", na.strings=c("|",":")))
  t(sort(table(words[nchar(words) > 3]), decreasing=TRUE)[1:10])
#+end_src
HTML 导出的代码:
1
2
words <- tolower(scan("babel-intro.org", what="", na.strings=c("|",":")))
t(sort(table(words[nchar(words) > 3]), decreasing=TRUE)[1:10])
** 捕获代码执行结果
Babel 提供了两种根本不同的模式来捕获代码执行的结果： functional mode 和 scripting mode 。 模式的选择可以通过配置 :results 头参数来指定。
*** :results value (functional mode)
代码执行的结果是代码块中最后一个语句的值。 在 functional mode 下，代码块是具有返回值的函数。 一个代码块的返回值可以用作另一代码块的输入，即使是不同语言的输入。 这样的话，Babel成为一种元编程语言。 如果块返回表格数据（某种类型的向量，数组或表），那么将可以作为 Org-mode 的表格保存在缓冲区中。 functional mode 是默认设置。
作为示例，观察以下python代码块及其输出。
1
2
3
4
import time
print("Hello, today's date is %s" % time.ctime())
print("Two plus two is")
return 2 + 2
请注意，在 functional mode 下，输出只由最后一个语句返回，没有其他情况。
*** :results output (scripting mode)
在 scripting mode 中，Babel捕获代码块的文本输出并将其放置在 Org-mode 的缓冲区中。 它被称为 scripting mode ，因为代码块包含一系列命令，并返回每个命令的输出。 与功能模式不同，代码块本身除了其包含的命令的输出之外没有返回值。2
观察以下使用 scripting mode 执行代码块的结果。
1
2
3
4
import time
print("Hello, today's date is %s" % time.ctime())
print('Two plus two is')
2 + 2
在这里， scripting mode 返回了python写到 stdout 的文本。 因为代码块不包含最后一个语句 (2 + 2) 的 print() 语句，所以结果中不会出现4。
** 基于会话的代码块
对于某些语言，例如Python，R，ruby和shell，可以在Emacs中运行一个不完备的交互式会话进程。 这意味着创建了一个不同源代码块之间共享数据对象的持久化环境。 Babel 支持使用 :session 头参数来 指定代码块运行于特定会话中。 如果头参数被赋予一个值，那么该参数将被用作会话的名称。 因此，可以并发的在不同的会话中运行同一语言的不同代码块。
基于特定会话的代码块对于原型设计和调试特别有用。 函数 org-babel-pop-to-session 可用于切换会话缓冲区。
一旦代码块编辑完成，通常最好在会话之外执行它，因为这样它执行的环境将是确定的。
With R, the session will be under the control of Emacs Speaks Statistics as usual, and the full power of ESS is thus still available, both in the R session, and when switching to the R code edit buffer with ​C-c '​.
** 代码块的入参
Babel 支持代码块的参数化，即可以将参数传递给代码块，从而使它们函数化。 functional mode 和 scripting mode 都支持入参。
*** 代码块作为函数的简单示例
首先我们来看一个非常简单的例子。 以下源代码块使用Python定义了一个函数，求入参的平方。
return x*x
在 Org-mode 文件中, 函数定义如下:
#+name: square
#+header: :var x=0
#+begin_src python
return x*x
#+end_src
调用函数如下:
#+call: square(x=6,y=8)
(对于 call 语法细节请参阅 Library of Babel)
nil
36
*** Org-mode 表格作为入参的更复杂的示例
在本例中，使用Emacs Lisp定义的一个名为 fibonacci-seq 的函数。 函数 fibonacci-seq 计算斐波纳契序列。 该函数只需要一个参数，在当前情况下参数即为 Org-mode 表格的引用。
下面即为传递给 fibonacci-seq 的 Org-mode 表格:
1	2	3	4	5	6	7	8	9	10
2	4	6	8	10	12	14	16	18	20
表格在 Org-mode 的缓冲区中如下所示：
#+tblname: fibonacci-inputs
| 1 | 2 | 3 | 4 |  5 |  6 |  7 |  8 |  9 | 10 |
| 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 |
Emacs Lisp的源代码:
1
2
3
4
5
6
(defun fibonacci (n)
(if (or (= n 0) (= n 1))
    n
  (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
  (mapcar (lambda (row)
	(mapcar #'fibonacci row)) fib-inputs)
在 Org-mode 中函数如下所示:
#+name: fibonacci-seq
#+begin_src emacs-lisp :var fib-inputs=fibonacci-inputs
  (defun fibonacci (n)
    (if (or (= n 0) (= n 1))
        n
      (+ (fibonacci (- n 1)) (fibonacci (- n 2)))))
  (mapcar (lambda (row)
            (mapcar #'fibonacci row)) fib-inputs)
#+end_src
fibonacci-seq 的返回值，也是一个表格:
** 代码块扩展
Babel 在执行之前“扩展”代码块，即，执行代码包括把引用的数据(或代码)填充到代码块内容里。 可以预览展开的内容，还可以在 tangling 期间展开代码。 扩展时，头参数和变量需要一并考虑进去。
preview
C-c M-b p (C-c C-v v) 关联到 org-babel-expand-src-block 函数。它可用于在代码块中预览扩展的内容, 对调试很有用。
tangling
扩展的的代码块可以被 tangled 。 tangling 可能包括的变量值
其他代码的执行结果，
存储在标题属性中变量，或者
表格。
tangling 扩展代码块的一个可能用途是用于emacs初始化。 用户名和密码等值可以存储在标题属性或表格中。 可以使用 :no-expand 头参数来阻止 tangling 期间代码块的扩展。
下面是代码块及其生成的扩展的示例。
数据被存储在表格中:
username	john-doe
password	abc123
引用数据表格的代码块:
1
2
(setq my-special-username (first (first data)))
(setq my-special-password (first (second data)))
在代码块内部， C-c M-b p (C-c C-v v)扩展内容如下：
1
2
3
(let ((data (quote (("john-doe") ("abc123")))))
(setq my-special-username (first (first data)))
(setq my-special-password (first (second data))))
** Org-mode 的元编程语言
因为用一种语言编写的函数的返回值可以被传递给另一种语言编写的函数， 或者传递到本身就可程序化的 Org-mode 的表格中， 所以可将 Babel 用作元功能编程语言。 Bable 可使许多语言一起工作, 混合使用各语言，每种语言可用于最合适的任务。
例如，在shell中进行一些系统诊断，并用R图形化诊断结果.
使用shell代码创建一个代码块，列出program目录中的目录以及它们的大小。Babel自动将输出转换为 Org-mode 表格。
#+name: directories
#+begin_src sh :results replace
  cd ~/program/ && du -sc * | grep -v total
#+end_src
代码如下：
cd ~/program/ && du -sc * | grep -v total
结果如下：
#+RESULTS: directories
|   2392 | github      |
|  90728 | org         |
|  15820 | program     |
| 190488 | program.tgz |
一行R语言编写的函数将 Org-mode 表中的数据绘制为饼形图。 请注意，当前代码块如何使用前一代码块的 srcname 来获取的数据 。
在 Org-mode 文件中:
#+name: directory-pie-chart(dirs = directories)
#+begin_src R :session R-pie-example :file ../images/babel/dirs.png :var dirs=directories() :results graphics
  pie(dirs[,1], labels = dirs[,2])
#+end_src
注： :results graphics 请参阅 Org Mode Features for R Source Code Blocks
HTML 导出的代码:
pie(dirs[,1],labels=dirs[,2])
